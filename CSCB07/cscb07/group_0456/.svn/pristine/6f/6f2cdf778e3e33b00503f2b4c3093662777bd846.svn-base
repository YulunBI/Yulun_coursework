package system;

import java.util.ArrayList;
import java.util.Arrays;

/**
 * Represents a Path of File or Directory names delimited by /
 */
public class Path {

  /**
   * The location of the path, in the form of an ArrayList
   */
  private ArrayList<String> location;

  /**
   * If the path ends with a forward slash
   */
  private Boolean endsWithFowardSlash;

  /**
   * Constructs a new Path using the string path
   * 
   * @param path The string format of a path
   */
  public Path(String path) {

    if (path.endsWith("/")) {
      endsWithFowardSlash = true;
    } else {
      endsWithFowardSlash = false;
    }

    String reg = "(?<=[^/])(/)(?=[^/]*)|(^/)";

    location = new ArrayList<String>(Arrays.asList(path.split(reg)));

    // empty string represents root
    if (location.isEmpty()) {
      location.add("");
    }

    // if the array list only has one word, then we're looking in current directory
    if (location.size() == 1 && !(location.get(0).isBlank())) {
      location.add(0, ".");
    }

  }


  /**
   * Returns a Path in the format of a String.
   * 
   * @return String The path as a string.
   */
  public String toString() {
    String completePath = "";
    for (String dir : location) {
      completePath += dir + "/";
    }

    return completePath;
  }


  /**
   * Returns the parent Path.
   * 
   * @return Path The parent path.
   */
  public Path getParentPath() {
    String parentPath = "";
    for (int i = 0; i < location.size() - 1; i++) {
      parentPath += location.get(i) + "/";
    }

    return new Path(parentPath);
  }


  /**
   * Returns the value of location.
   * 
   * @return ArrayList<String> The list format of this path.
   */
  public ArrayList<String> getList() {
    return location;
  }


  /**
   * Returns the value of the last element of location.
   * 
   * @return String The last element of this path.
   */
  public String getLastElement() {
    return location.get(location.size() - 1);
  }

  /**
   * Returns the value of endsWithFowardSlash
   * 
   * @return Boolean If the path ends with a forward slash.
   */
  public Boolean endsWithFowardSlash() {
    return endsWithFowardSlash;
  }

}
