package test;

import java.util.ArrayList;
import javax.naming.InvalidNameException;
import exceptions.AlreadyExistsException;
import exceptions.InvalidPathException;
import system.Directory;
import system.File;
import system.FileSystem;
import system.Path;

public class MockFileSystem implements FileSystem {

  /**
   * Represents the current Directory.
   */
  private Directory currentDir;

  public MockFileSystem() {
    currentDir = new MockDirectory("Old CD", "CD Path");
  }


  @Override
  public String recursiveList(Directory dir, int counter, Boolean printPath) {
    if (printPath) {
      return "Tree With Paths";
    }

    return "Normal Tree";
  }

  @Override
  public void addFile(Path path)
      throws InvalidPathException, InvalidNameException, AlreadyExistsException {
    // TODO Auto-generated method stub

  }

  @Override
  public void addDirectory(Path path)
      throws InvalidPathException, InvalidNameException, AlreadyExistsException {
    if (path.getList().get(1).equals("Invalid Path")) {
      throw new InvalidPathException("Invalid Path");
    }

    if (path.getList().get(1).startsWith("Valid Path")) {
      currentDir.addSubDictionary(path.getList().get(1));
    }

    if (path.getList().get(1).startsWith("Path With Invalid Name")) {
      throw new InvalidNameException("Invalid Name");
    }

    if (path.getList().get(1).startsWith("Path That Already Exists")) {
      throw new InvalidNameException("Already Exists");
    }



  }

  @Override
  public File findFile(Path path) throws InvalidPathException {
    if (path.getList().get(1).equals("Invalid Path")) {
      throw new InvalidPathException("Invalid Path");
    }

    if (path.getList().get(1).equals("Valid Path")) {
      File f = new MockFile("Valid File", "Valid Path");
      f.setText("Hello World");
      return f;
    }

    return null;
  }

  @Override
  public Directory findDirectory(Path path) throws InvalidPathException {
    if (path.getList().get(0).isBlank()) {
      Directory d = new MockDirectory("Valid Directory", "Valid Path");
      return d;
    }
    if (path.getList().get(1).equals("Invalid Path")) {
      throw new InvalidPathException("Invalid Path");
    }

    if (path.getList().get(1).equals("Valid Path")) {
      Directory d = new MockDirectory("Valid Directory", "Valid Path");
      return d;
    }

    if (path.getList().get(1).equals("Non Empty Valid Path")) {
      Directory d = new MockDirectory("Valid Directory", "Valid Path");
      try {
        d.addSubDictionary("Child 1");
        d.addSubDictionary("Child 1");
        d.addSubDictionary("Child 2");
        d.addSubDictionary("Child 3");
        d.addSubFile("File 1");
      } catch (InvalidNameException | AlreadyExistsException e) {
        return null;
      }
      return d;
    }
    return null;
  }

  @Override
  public void changeDirectory(Path path) throws InvalidPathException {

    if (path.getList().get(1).equals("Invalid Path")) {
      throw new InvalidPathException("Invalid Path");
    }

    if (path.getList().get(1).equals("Valid Path")) {
      currentDir = new MockDirectory("Changed Directory", "Valid Path");
    }

  }

  @Override
  public Directory getDirectory() {
    return currentDir;
  }

  @Override
  public ArrayList<String> getHistory() {
    // TODO Auto-generated method stub
    return null;
  }

  @Override
  public void addHistory(String s) {
    // TODO Auto-generated method stub

  }

  @Override
  public void stackPush(Directory d) {
    // TODO Auto-generated method stub

  }

  @Override
  public Directory stackPop() {
    // TODO Auto-generated method stub
    return null;
  }

  @Override
  public void redirect(String specifier, String text, String file) throws InvalidNameException,
      InvalidPathException, AlreadyExistsException, IllegalArgumentException {
    if (file.startsWith("Invalid File Name")) {
      throw new InvalidNameException();
    }

    if (file.startsWith("Invalid Parent Path")) {
      throw new InvalidPathException("");
    }

    return;

  }

  @Override
  public Directory getRoot() {
    // TODO Auto-generated method stub
    return null;
  }

}
