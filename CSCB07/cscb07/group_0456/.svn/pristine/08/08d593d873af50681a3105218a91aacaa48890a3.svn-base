package commands;

import exceptions.AlreadyExistsException;
import exceptions.InvalidParamLengthException;
import exceptions.InvalidPathException;
import java.util.ArrayList;
import javax.naming.InvalidNameException;
import system.Directory;
import system.File;
import system.FileSystem;
import system.JPath;
import system.Path;

public class Copy extends Command {
  
  private static final int EXACT_ARG_LENGTH = 2;

  public Copy() {
    this.setName("cp");
    this.setDocs("cp OLDPATH NEWPATH\n\tCopy file/directory at OLDPATH to NEWPATH."
        + "\n\tOLDPATH and NEWPATH can be either relative to the current directory or full paths."
        + "\n\tIf NEWPATH is a directory, copy OLDPATH into that directory.");
  }
  
  public String executeCommand(FileSystem fs, ArrayList<String> arguments)
      throws InvalidParamLengthException {
      if (arguments.size() != EXACT_ARG_LENGTH)
        throw new InvalidParamLengthException("Invalid parameter length");    
      try {
        Path oldPath = new JPath(arguments.get(0)); 
        if (fs.findFile(oldPath) != null) { //copying a file        
          copyFile(fs, arguments);    
        } else if (fs.findDirectory(oldPath) != null) { //copying a directory        
          copyDirectory(fs, arguments);           
        }
      } catch (InvalidPathException e) {
        System.err.println(e.getMessage());
      }    
      return "";
    }
    
    private void copyFile(FileSystem fs, ArrayList<String> arguments) {
      Path oldPath = new JPath(arguments.get(0));
      Path newPath = new JPath(arguments.get(1));
      File f = null;
      try {
        try {
          f = fs.findFile(oldPath);
          if (fs.findFile(newPath) != null) { // case 6: overwrite target with f
            overwriteThis(fs, newPath, f);            
          } else if (fs.findDirectory(newPath) != null) { // case 1: move f into newPath
            newPath = new JPath("./" + arguments.get(1) + "/" + f.getName());
            copyThis(fs, newPath, f);
          }          
        } catch (InvalidPathException e1) { // when no file/dir exists at newpath          
          copyThis(fs, newPath, f); // case 5: rename f if possible
        }
      } catch (AlreadyExistsException e) {
        System.err.println(e.getMessage());
      } catch (InvalidNameException e) {
        System.err.println(e.getMessage());
      } catch (InvalidPathException e) {
        System.err.println(e.getMessage());
      }
    }
    
    private void copyDirectory(FileSystem fs, ArrayList<String> arguments) {
      Path oldPath = new JPath(arguments.get(0));
      Path newPath = new JPath(arguments.get(1));
      Directory d = null;
      try {
      checkIllegalDirectory(fs, arguments);
        try {
          d = fs.findDirectory(oldPath);
          if (fs.findFile(newPath) != null) {
            throw new IllegalArgumentException("Can't move directory into a file");
          } else if (fs.findDirectory(newPath) != null) { // case 2: move d into newPath
            newPath = new JPath("./" + arguments.get(1) + "/" + d.getName());
            copyThis(fs, newPath, d);
          }
        } catch (InvalidPathException e1) { // when no file/dir exists at newpath              
          copyThis(fs, newPath, d); // case 3: rename d if possible
        }
      } catch (InvalidPathException e) {
        System.err.println(e.getMessage());
      } catch (IllegalArgumentException e) {
        System.err.println(e.getMessage());
      } catch (AlreadyExistsException e) {
        System.err.println(e.getMessage());      
      } catch (InvalidNameException e) {
        System.err.println(e.getMessage());
      }
    }
    
    private void checkIllegalDirectory(FileSystem fs, ArrayList<String> arguments)
        throws InvalidPathException, IllegalArgumentException {
      Path oldPath = new JPath(arguments.get(0));
      Directory d = fs.findDirectory(oldPath);
      if (fs.getDirectory().getPath().toString().contains(oldPath.toString()))
        throw new IllegalArgumentException("Can't move current working directory");
      else if (d.equals(fs.getRoot()))
        throw new IllegalArgumentException("Can't move the root directory");
      else if (arguments.get(1).contains(oldPath.toString()))
        throw new IllegalArgumentException("Can't move parent to child directory");    
    }
    
    private void overwriteThis(FileSystem fs, Path targetPath, File oldFile)
        throws InvalidPathException {
      File target = fs.findFile(targetPath);
      target.setText(oldFile.getText());
    }
    
    private void copyThis(FileSystem fs, Path targetPath, File oldFile) 
        throws InvalidPathException, InvalidNameException, AlreadyExistsException {    
      fs.addFile(targetPath);
      File target = fs.findFile(targetPath);
      target.setText(oldFile.getText());
    }
    
    private void copyThis(FileSystem fs, Path targetPath, Directory oldDir) 
        throws InvalidPathException, InvalidNameException, AlreadyExistsException {
      fs.addDirectory(targetPath);
      Directory target = fs.findDirectory(targetPath);
      target.replaceThis(oldDir);
    }
  
}
