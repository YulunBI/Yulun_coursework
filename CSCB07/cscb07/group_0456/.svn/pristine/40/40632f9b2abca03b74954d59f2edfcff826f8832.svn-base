package commands;

import exceptions.AlreadyExistsException;
import exceptions.InvalidParamLengthException;
import exceptions.InvalidPathException;
import javax.naming.InvalidNameException;
import java.util.*;
import system.*;
import system.File;

/**
 * Command for moving files or directories to new or existing locations.
 */
public class Move extends Command {
  
  /**
   * The exact number of arguments required to execute this command.
   */
  private static final int EXACT_ARG_LENGTH = 2;
  
  /**
   * Create new instance of a Move object with initial name and docs.
   */
  public Move() {
    this.setName("mv");
    this.setDocs("mv OLDPATH NEWPATH\n\tMove file/directory at OLDPATH to NEWPATH."
        + "\n\tOLDPATH and NEWPATH can be either relative to the current directory or full paths."
        + "\n\tIf NEWPATH and OLDPATH are both files, overwrite NEWPATH's contents with OLDPATH."
        + "\n\tIf NEWPATH doesn't exist, rename OLDPATH to NEWPATH.");
  }
  
  /**
   * Move the file/directory specified by first argument to location specified at second argument.
   * Can rename file/directory by specifying a non-existent file/directory name at target
   * location, though only one directory in the path can be non-existent.
   * If moving a file and file exists at target, overwrite existing file with moved file.
   * Will also move the contents of a directory recursively.
   * Throws InvalidParamLengthException when number of args is given is not EXACT_ARG_LENGTH.
   * 
   * @param fs The FileSystem associated with the shell this command is running in
   * @param arguments The list of arguments provided by the user
   * @return Returns empty string as this command has no text output
   * @throws InvalidParamLengthException if there are not EXACT_ARG_LENGTH arguments provided.
   */
  public String executeCommand(FileSystem fs, ArrayList<String> arguments)
    throws InvalidParamLengthException {
    if (arguments.size() != EXACT_ARG_LENGTH)
      throw new InvalidParamLengthException("Invalid parameter length");    
    try {
      Path oldPath = new JPath(arguments.get(0)); 
      if (fs.findFile(oldPath) != null) { //moving a file        
        moveFile(fs, arguments);    
      } else if (fs.findDirectory(oldPath) != null) { //moving a directory        
        moveDirectory(fs, arguments);           
      }
    } catch (InvalidPathException e) {
      System.err.println(e.getMessage());
    }    
    return "";
  }
  
  /**
   * Move file specified by first argument to location specified at second argument.
   * If target is a directory, move file into that directory.
   * If target is a file, overwrite target with moved file.
   * If target does not exist, treat the last member of target path as a new name to give
   * file. Will only work if the rest of the path is valid.
   * 
   * @param fs The FileSystem associated with the shell this command is running in
   * @param arguments The list of arguments provided by the user
   */
  private void moveFile(FileSystem fs, ArrayList<String> arguments) {
    Path oldPath = new JPath(arguments.get(0));
    Path newPath = new JPath(arguments.get(1));
    File f = null;
    try {
      try {
        f = fs.findFile(oldPath);
        if (fs.findFile(newPath) != null) { // case 6: overwrite target with f
          overwriteThis(fs, newPath, f);            
        } else if (fs.findDirectory(newPath) != null) { // case 1: move f into newPath
          newPath = new JPath("./" + arguments.get(1) + "/" + f.getName());
          moveThis(fs, newPath, f);
        }          
      } catch (InvalidPathException e1) { // when no file/dir exists at newpath          
        moveThis(fs, newPath, f); // case 5: rename f if possible
      }
    } catch (AlreadyExistsException e) {
      System.err.println(e.getMessage());
    } catch (InvalidNameException e) {
      System.err.println(e.getMessage());
    } catch (InvalidPathException e) {
      System.err.println(e.getMessage());
    }
  }
  
  /**
   * Move directory specified by first argument to location specified at second argument.
   * If target is a directory, move directory into that directory.
   * If target is a file, sends an error message.
   * If target does not exist, treat the last member of target path as a new name to give
   * directory. Will only work if the rest of the path is valid.
   * 
   * @param fs The FileSystem associated with the shell this command is running in
   * @param arguments The list of arguments provided by the user
   */
  private void moveDirectory(FileSystem fs, ArrayList<String> arguments) {
    Path oldPath = new JPath(arguments.get(0));
    Path newPath = new JPath(arguments.get(1));
    Directory d = null;
    try {
    checkIllegalDirectory(fs, arguments);
      try {
        d = fs.findDirectory(oldPath);
        if (fs.findFile(newPath) != null) {
          throw new IllegalArgumentException("Can't move directory into a file");
        } else if (fs.findDirectory(newPath) != null) { // case 2: move d into newPath
          newPath = new JPath("./" + arguments.get(1) + "/" + d.getName());
          moveThis(fs, newPath, d);
        }
      } catch (InvalidPathException e1) { // when no file/dir exists at newpath              
        moveThis(fs, newPath, d); // case 3: rename d if possible
      }
    } catch (InvalidPathException e) {
      System.err.println(e.getMessage());
    } catch (IllegalArgumentException e) {
      System.err.println(e.getMessage());
    } catch (AlreadyExistsException e) {
      System.err.println(e.getMessage());      
    } catch (InvalidNameException e) {
      System.err.println(e.getMessage());
    }
  }
  
  /**
   * Checks if the directory specified by the first argument is valid to be moved.
   * A directory is invalid if it's the root, contains the current working directory, or
   * the move action involves moving a parent into its child.
   * 
   * @param fs The FileSystem associated with the shell this command is running in
   * @param arguments The list of arguments provided by the user
   * @throws InvalidPathException if directory cannot be found.
   * @throws IllegalArgumentException if directory is not valid to be copied.
   */
  private void checkIllegalDirectory(FileSystem fs, ArrayList<String> arguments)
      throws InvalidPathException, IllegalArgumentException {
    Path oldPath = new JPath(arguments.get(0));
    Path newPath = new JPath(arguments.get(1));
    
    Directory d = fs.findDirectory(oldPath);
    if (fs.getDirectory().getPath().toString().contains(oldPath.toString()))
      throw new IllegalArgumentException("Can't move current working directory");
    else if (d.equals(fs.getRoot()))
      throw new IllegalArgumentException("Can't move the root directory");
    else if (newPath.toString().contains(oldPath.toString()))
      throw new IllegalArgumentException("Can't move parent to child directory");    
  }  
  
  /**
   * Overwrites contents of file at targetPath with contents of oldFile and removes oldFile.
   * 
   * @param fs The FileSystem associated with the shell this command is running in
   * @param targetPath Path leading to the file to be overwritten.
   * @param oldFile Original file to be copied to file at targetPath.
   * @throws InvalidPathException if file is not found at targetPath.
   */
  private void overwriteThis(FileSystem fs, Path targetPath, File oldFile)
      throws InvalidPathException {
    File target = fs.findFile(targetPath);
    target.setText(oldFile.getText());
    removeThis(fs, oldFile);
  }
  
  /**
   * Moves file oldFile to location specified by targetPath.
   * 
   * @param fs The FileSystem associated with the shell this command is running in
   * @param targetPath Path leading to the location of the moved file.
   * @param oldFile Original file to be moved to location at targetPath.
   * @throws InvalidPathException if file cannot be created at targetPath.
   * @throws InvalidNameException if name for moved file is not valid.
   * @throws AlreadyExistsException if file already exists at targetPath.
   */
  private void moveThis(FileSystem fs, Path targetPath, File oldFile) 
      throws InvalidPathException, InvalidNameException, AlreadyExistsException {    
    fs.addFile(targetPath);
    File target = fs.findFile(targetPath);
    target.setText(oldFile.getText());
    removeThis(fs, oldFile);
  }
  
  /**
   * Moves directory oldDir to location specified by targetPath.
   * 
   * @param fs The FileSystem associated with the shell this command is running in
   * @param targetPath Path leading to the location of the moved directory.
   * @param oldDir Original directory to be moved to location at targetPath.
   * @throws InvalidPathException if directory cannot be created at targetPath.
   * @throws InvalidNameException if name for moved directory is not valid.
   * @throws AlreadyExistsException if directory already exists at targetPath.
   */
  private void moveThis(FileSystem fs, Path targetPath, Directory oldDir) 
      throws InvalidPathException, InvalidNameException, AlreadyExistsException {
    fs.addDirectory(targetPath);
    Directory target = fs.findDirectory(targetPath);
    target.replaceThis(oldDir);
    removeThis(fs, oldDir);
  }
  
  /**
   * Removes target file from the filesystem.
   * 
   * @param fs The FileSystem associated with the shell this command is running in.
   * @param f The file to be removed.
   * @throws InvalidPathException if file cannot be found in fs.
   */
  private void removeThis(FileSystem fs, File f) throws InvalidPathException{
    Directory par = fs.findDirectory(f.getLocation());
    par.removeChild(f); // remove original
  }
  
  /**
   * Removes target directory from the filesystem.
   * 
   * @param fs The FileSystem associated with the shell this command is running in.
   * @param d The directory to be removed.
   * @throws InvalidPathException if directory cannot be found in fs.
   */
  private void removeThis(FileSystem fs, Directory d) {
    Directory par = d.getParent();
    par.removeChild(d); // remove original    
  }
}
