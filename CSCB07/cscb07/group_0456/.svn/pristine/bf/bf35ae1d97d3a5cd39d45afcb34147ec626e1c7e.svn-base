package commands;

import java.util.ArrayList;

import exceptions.InvalidParamLengthException;
import exceptions.InvalidPathException;
import system.Directory;
import system.File;
import system.FileSystem;
import system.JPath;
import system.Path;

public class Search extends Command {

  /**
   * The number of arguments required to execute this command.
   */
  private static final int MIN_ARG_LENGTH = 5;

  /**
   * Creates a new Search instance and initializes the command name and docs.
   */
  public Search() {
    this.setName("search");
    this.setDocs("search path ... -type [f|d] -name \"name\" \n\t" + 
                "Recursively searches paths for files[f] or directories[d] called name");
  }

  /**
   * Searches all the paths in arguments and returns the paths of the Files or Directories
   * given by the name provided
   * 
   * @param fs the FileSystem associated with the shell this command is running in
   * @param arguments the list of arguments provided by the user
   * @return The output of the command
   * @throws InvalidParamLengthException If there are not atleast MIN_ARG_LENGTH arguments 
   *                                     provided.
   */
  public String executeCommand(FileSystem fs, ArrayList<String> arguments) 
      throws InvalidParamLengthException {

    if (arguments.size() < MIN_ARG_LENGTH) {
      throw new InvalidParamLengthException("Invalid parameter length");
    }

    int typeIndex = arguments.size() - 4;
    String name = arguments.get(arguments.size() - 1);
    String type = arguments.get(typeIndex + 1);
    String output = "";

    try {
        checkForIllegalArgs(arguments);
        name = name.substring(1, name.length() - 1);
  
        for (int i = 0; i < typeIndex; i++) {
          Path p = new JPath(arguments.get(i));
          Directory d = fs.findDirectory(p);
          if (type.equals("f")){
            output += searchForFiles(d, name);
          } else if (type.equals("d")){
            output += searchForDirs(d, name);
          }
        }
            
    } catch (InvalidPathException e) {
      System.err.println(e.getMessage());
    }

    return output;
  }

  private String searchForFiles(Directory dir, String name) {

    String files = "";

    for (File f : dir.getFile()) {
      if (f.getName().matches(name)) {
        files += f.getLocation().toString() + name + "\n";
      }
    }

    for (Directory d : dir.getChildren()) {
      files += searchForFiles(d, name);
    }

    return files;
  }

  private String searchForDirs(Directory dir, String name) {

    String dirs = "";

    for (Directory d : dir.getChildren()) {
      if (d.getName().matches(name)) {
        dirs += d.getPath() + "\n";
      }
    }

    for (Directory d : dir.getChildren()) {
      dirs += searchForDirs(d, name);
    }

    return dirs;
  }

  private void checkForIllegalArgs(ArrayList<String> arguments)
    throws IllegalArgumentException{
    
    int typeIndex = arguments.size() - 4;
    String type = arguments.get(typeIndex + 1);
    int nameIndex = arguments.size() - 2;
    String name = arguments.get(arguments.size() - 1);

    if (!arguments.get(typeIndex).equals("-type") || !arguments.get(nameIndex).equals("-name")
        || !name.startsWith("\"") || !name.endsWith("\"") || !(type.equals("d")||type.equals("f"))){
          throw new IllegalArgumentException("Invalid Parameters were provided.");
        }
  }

}