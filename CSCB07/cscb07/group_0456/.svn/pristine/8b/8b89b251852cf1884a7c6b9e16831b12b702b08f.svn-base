package commands;

import java.lang.reflect.InvocationTargetException;
import java.util.HashMap;
import exceptions.InvalidCommandNameException;

/** 
 * Hash table to match command name to corresponding class.
 * 
 */
public class CommandHashTable {
  /** 
    * Represents a hash map which maps command names to its appropriate class.
    */
  private HashMap<String, String> commandHashMap;

  /**
   * Constructs a new CommandHashTable and adds all command name mappings.
   */
  public CommandHashTable() {
    commandHashMap = new HashMap<String, String>();

    commandHashMap.put("cd", "commands.ChangeDirectory");
    commandHashMap.put("cat", "commands.Concatenate");
    commandHashMap.put("echo", "commands.Echo");
    commandHashMap.put("exit", "commands.Exit");
    commandHashMap.put("history", "commands.History");
    commandHashMap.put("ls", "commands.ListFiles");
    commandHashMap.put("mkdir", "commands.MakeDirectory");
    commandHashMap.put("man", "commands.Manual");
    commandHashMap.put("popd", "commands.PopDirectory");
    commandHashMap.put("pwd", "commands.PrintWorkingDirectory");
    commandHashMap.put("pushd", "commands.PushDirectory");

  }

  
  /**
   * Returns a new Command given by name if it exists, 
   * otherwise InvalidCommandNameException is thrown.
   * @param name
   * @return Command
   * @throws InvalidCommandNameException
   */
  public Command findCommand(String name) throws InvalidCommandNameException {
    Command command = null;

    String s = commandHashMap.get(name);

    if (s == null) {
      throw new InvalidCommandNameException("Invalid command name");
    }
 

    Class<?> c;
    try {
      c = Class.forName(s);
      command = (Command) c.getDeclaredConstructor().newInstance();
    } catch (InstantiationException | IllegalAccessException | IllegalArgumentException
        | InvocationTargetException | NoSuchMethodException | SecurityException
        | ClassNotFoundException e) {

      System.out.println(e.getMessage());
    }



    return command;

  }
}
