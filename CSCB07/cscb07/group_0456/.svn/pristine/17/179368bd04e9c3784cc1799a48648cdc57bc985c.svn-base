package commands;

import java.util.ArrayList;

import exceptions.InvalidPathException;
import system.Directory;
import system.File;
import system.FileSystem;
import system.Path;

public class ListFiles extends Command{
  public ListFiles() {
    this.setName("ls");
    this.setDocs("ls [PATH ...]\n\tIf no paths are given, print the contents of current directory,"+ 
        "\n\twith a new line following each file/directory." + 
        "\n\tOtherwise, for each path p:" + 
        "\n\t\tIf p specifies a file, print p." +
        "\n\t\tIf p specifies directory, print p + ':' + contents of directory + newline.");
  }
  
  public void executeCommand(FileSystem fs, ArrayList<String> arguments) {

    try {
      this.setArguments(arguments);

      if (this.getArguments().size() == 0) {
        Directory d = fs.getDirectory();
        printContentInCurrentDirectory(d);
      } else {
        for (String s : this.getArguments()) {
          Path p = new Path(s);

          if (fs.findFile(p) != null) {
            System.out.println(p.getLastElement());
          } else if (fs.findDirectory(p) != null) {
            Directory curr = fs.findDirectory(p);
            System.out.println(curr.getName()+":");
            printContentInCurrentDirectory(curr);
          } 
        }
      }
    } catch (InvalidPathException e) {
      System.err.println(e.getMessage());
    }
  }
  
  private void printContentInCurrentDirectory(Directory d) {
    // get subDirectory and subFile list from FileSystem
    // print them one by one each followed by a newline
    printDirectory(d.getChildren());
    printFiles(d.getFile());
  }
  
  private void printDirectory(ArrayList<Directory> list) {
    for (Directory d : list) {
      System.out.println(d.getName());
    }
  }
  
  private void printFiles(ArrayList<File> list) {
    for (File s : list) {
      System.out.println(s.getName());
    }
  }
}