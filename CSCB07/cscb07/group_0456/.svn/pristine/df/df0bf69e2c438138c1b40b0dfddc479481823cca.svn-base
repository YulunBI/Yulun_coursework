package commands;

import java.util.ArrayList;
import exceptions.InvalidCommandNameException;
import exceptions.InvalidParamLengthException;
import system.FileSystem;

public class Manual extends Command {
  
  /** 
   * The minimum number of arguments required to execute this command
   */
  private static final int MIN_ARG_LENGTH = 1;
  private CommandHashTable comTable;

  public Manual() {
    this.setName("man");
    this.setDocs("man CMD [CMD2 ...]\n\tPrint documentation for CMD(s).");
    comTable = new CommandHashTable();
  }

  /**
   * Prints out the documentation for a command into the console as specified by arguments.
   * The user can enter any number of command names, separated by spaces, to have their
   * documentation printed out sequentially in the console.
   * InvalidCommandNameException is thrown if the user provides an invalid command name.
   * InvalidParamLengthException is thrown if there are less than MIN_ARG_LENGTH arguments provided.
   * 
   * @param fs The FileSystem associated with the shell this command is running in.
   * @param arguments List of arguments provided by the user. Should be any number of command names.
   * @throws InvalidCommandNameException
   * @throws InvalidParamLengthException
   */
  public void executeCommand(FileSystem fs, ArrayList<String> arguments)
      throws InvalidParamLengthException {
    if (arguments.size() < MIN_ARG_LENGTH) {
      throw new InvalidParamLengthException("Invalid parameter length");
    }
    try {
      for (String s : arguments) {
        Command c = comTable.findCommand(s); // create temp command object, this is probably bad
        System.out.println(c.getDocs());
      }
    } catch (InvalidCommandNameException e) {
      System.err.println(e.getMessage());
    }
  }

}
