package system;

import java.util.ArrayList;

import commands.Command;

public class FileSystem {
    private Directory root;
    private Directory currentDir;
    private ArrayList<Command> commands;
    private ArrayList<String> history;

    public FileSystem() {

        root = new Directory("", new Path("/"), null);
        currentDir = root;
        // add all commands - new command constructors to be added
        // commands.add(new ChangeDirectory());
    }

    private Directory traverseFileSystem(Path path) {

        //keeps track of directory that we're looking at
        Directory selected;
        String selectedName = path.getList().get(0);

        //determining the first selected directory
        if (selectedName.matches(".")) {
            selected = currentDir;

        } else if (selectedName.matches("..")) {
            selected = currentDir.getParent();
        } else if (selectedName.isEmpty()) {
            selected = root;
        } else {
            return null;
        }

        int length = path.getList().size();

        // if the path is a file, then only go till its parent directory
        if (path.isFile())
            length--;

        // go through every directory in the path
        for (int i = 1; i < length; i++) {
            if (selected == null) {
                return null;
            }

            selectedName = path.getList().get(i);

            if (selectedName.matches("..")) {
                // selected directory is parent
                selected = selected.getParent();
                continue;

            } else if (selectedName.matches(".")) {
                // selected directory is the same
                continue;
            }

            for (Directory dir : selected.getChildren()) {
                if (selectedName.matches(dir.getName())) {
                    selected = dir;
                    break;
                }
            }
        }

        // this is a problem, if you end with . or ..
        if (selected.getName().matches(path.getLastElement())) {
            return selected;
        }
        return null;
    }

    public void addFile(String name, Path path) {
        Directory parent = traverseFileSystem(path);
        if (parent == null)
            return; // throw Invalid path error

        // addSubFile must check if file exists already
        parent.addSubFile(name);
    }

    public void addDirectory(String name, Path path) {
        // go through path and add dir
        Directory parent = traverseFileSystem(path);
        if (parent == null)
            return; // throw Invalid path error

        // addSubDirectory must check if directory exists already
        parent.addSubDictionary(name);

    }

    public void changeDirectory(Path path) {

    }

    public ArrayList<String> getHistory() {
        return this.history;
    }


}
