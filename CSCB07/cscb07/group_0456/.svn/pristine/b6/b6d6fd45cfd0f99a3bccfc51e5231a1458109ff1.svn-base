// **********************************************************
// Assignment2:
// Student1:
// UTORID user_name: khanyus7
// UT Student #: 1006330329
// Author: Yusuf Khan
//
// Student2:
// UTORID user_name: wuyulu10
// UT Student #: 1004912785
// Author: Yulun Wu
//
// Student3:
// UTORID user_name: lujia34
// UT Student #: 1006173196
// Author: Jia (Arthur) Lu
//
// Student4:
// UTORID user_name:
// UT Student #:
// Author:
//
//
// Honor Code: I pledge that this program represents my own
// program code and that I have coded on my own. I received
// help from no one in designing and debugging my program.
// I have also read the plagiarism section in the course info
// sheet of CSC B07 and understand the consequences.
// *********************************************************

package system;

import exceptions.AlreadyExistsException;
import exceptions.InvalidPathException;
import java.util.ArrayList;
import java.util.EmptyStackException;
import java.util.Stack;
import javax.naming.InvalidNameException;


/**
 * Representation of a FileSystem as a general tree.
 */
public class FileSystem {
  /**
   * The only instance of FileSystem.
   */
  private static FileSystem fs = null;

  /**
   * Represents the root Directory.
   */
  private Directory root;

  /**
   * Represents the current Directory.
   */
  private Directory currentDir;

  /**
   * A list to store command history.
   */
  private ArrayList<String> history;

  /**
   * Represents the directory stack.
   */
  private Stack<Directory> dirStack;

  /**
   * Constructs a new FileSystem with currentDir pointing at the root.
   */
  private FileSystem() {

    root = new Directory("", new Path("/"), null);

    // initialize lists and stack
    history = new ArrayList<String>();
    dirStack = new Stack<Directory>();

    currentDir = root;

  }


  /**
   * Creates a new instance FileSystem if it is null, otherwise it returns the already created
   * instance.
   * 
   * @return FileSystem
   */
  public static FileSystem createFileSystemInstance() {
    if (fs == null) {
      fs = new FileSystem();
    }
    return fs;
  }


  /**
   * Traverses through the FileSystem tree and returns the Directory specified by path if is valid,
   * otherwise InvalidPathException is thrown.
   * 
   * @param path Represents a path to a Directory.
   * @return Directory The Directory found by the traversal.
   * @throws InvalidPathException If path is invalid.
   */
  private Directory traverseFileSystem(Path path) throws InvalidPathException {
    Directory selected = null;
    String selectedName = path.getList().get(0);

    if (selectedName.equals(".")) {
      selected = currentDir;
    } else if (selectedName.equals("..")) {
      selected = currentDir.getParent();
    } else if (selectedName.isEmpty()) {
      selected = root;
    }
    checkForInvalidPath(selected);

    for (int i = 1; i < path.getList().size(); i++) {

      checkForInvalidPath(selected);
      selectedName = path.getList().get(i);

      if (selectedName.equals("..")) {
        selected = selected.getParent();
        continue;
      } else if (selectedName.equals(".")) {
        continue;
      }
      selected = selected.getSubDirectory(selectedName);
    }

    checkForInvalidPath(selected);
    return selected;
  }


  /**
   * Adds a File to the FileSystem tree if parent of path is valid, the File name is valid and it
   * does not already exist. InvalidPathException is thrown if parent of path is invalid.
   * InvalidNameException is thrown if the File name is invalid. AlreadyExistsException is thrown if
   * a Directory or File of the same name already exists.
   * 
   * @param path Represents a path to a File.
   * @throws InvalidPathException If parent of path is invalid.
   * @throws InvalidNameException If the File name is invalid.
   * @throws AlreadyExistsException If a Directory or File of the same name already exists.
   */
  public void addFile(Path path)
      throws InvalidPathException, InvalidNameException, AlreadyExistsException {
    if (path.endsWithFowardSlash()) {
      throw new InvalidPathException("Path is invalid.");
    }

    Directory parent = traverseFileSystem(path.getParentPath());
    String name = path.getLastElement();

    parent.addSubFile(name);
  }


  /**
   * Adds a Directory to the FileSystem tree if parent of path is valid, the file name is valid and
   * it does not already exist. InvalidPathException is thrown if parent of path is invalid.
   * InvalidNameException is thrown if the Directory name is invalid. AlreadyExistsException is
   * thrown if a Directory or File of the same name already exists.
   * 
   * @param path Represents a path to a Directory.
   * @throws InvalidPathException If parent of path is invalid.
   * @throws InvalidNameException If the Directory name is invalid.
   * @throws AlreadyExistsException If a Directory or File of the same name already exists.
   */
  public void addDirectory(Path path)
      throws InvalidPathException, InvalidNameException, AlreadyExistsException {
    // go through path and add dir
    Directory parent = traverseFileSystem(path.getParentPath());
    String name = path.getLastElement();

    parent.addSubDictionary(name);

  }


  /**
   * Returns the File specified by path if it exists in the FileSystem tree. If the parent path is
   * invalid, InvalidPathException is thrown. If the parent path is valid and the File doesn't
   * exist, then null is returned.
   * 
   * @param path Represents a path to a File.
   * @return File Directory The File found in the FileSystem
   * @throws InvalidPathException If the parent path is valid and the File doesn't exist.
   */
  public File findFile(Path path) throws InvalidPathException {
    if (path.endsWithFowardSlash()) {
      throw new InvalidPathException("Path is invalid.");
    }

    Directory parent = traverseFileSystem(path.getParentPath());

    for (File f : parent.getFile()) {
      if (f.getName().equals(path.getLastElement())) {
        return f;
      }
    }

    return null;
  }


  /**
   * Returns the Directory specified by path if it exists in the FileSystem tree. If path is
   * invalid, InvalidPathException is thrown.
   * 
   * @param path Represents a path to a Directory.
   * @return Directory The Directory found in the FileSystem.
   * @throws InvalidPathException If path is invalid.
   */
  public Directory findDirectory(Path path) throws InvalidPathException {
    Directory parent = traverseFileSystem(path);

    return parent;
  }


  /**
   * Changes currentDir to the Directory specified by path if it is valid. Otherwise
   * InvalidPathException is thrown.
   * 
   * @param path Represents a path to a Directory.
   * @throws InvalidPathException If the given path is invalid.
   */
  public void changeDirectory(Path path) throws InvalidPathException {
    Directory changed = traverseFileSystem(path);

    currentDir = changed;
  }


  /**
   * Returns the value of currentDir.
   * 
   * @return Directory The value of the currentDir.
   */
  public Directory getDirectory() {
    return this.currentDir;
  }


  /**
   * Returns the value of history.
   * 
   * @return    The value of the history.
   */
  public ArrayList<String> getHistory() {
    return this.history;
  }


  /**
   * Adds s to history.
   * 
   * @param s A string to add to history.
   */
  public void addHistory(String s) {
    this.history.add(s);
  }


  /**
   * Pushes d to dirStack.
   * 
   * @param d A string to push to Directory stack.
   */
  public void stackPush(Directory d) {
    dirStack.push(d);
  }


  /**
   * Returns the popped value of dirStack if it is non-empty. Throws EmptyStackException if there is
   * nothing in the stack.
   * 
   * @return Directory A Directory popped from Directory stack.
   * @throws EmptyStackException If there is nothing in the stack.
   */
  public Directory stackPop() {
    Directory d = null;
    try {
      d = dirStack.pop();
    } catch (EmptyStackException e) {
      System.err.println("No directory currently in stack");
    }
    return d;
  }



  /**
   * Redirects text to file. If specifier is ">", then it overwrites the file. If specifier is ">>",
   * then it appends the text to the file. If the specifier is neither, then
   * IllegalArgumentException is thrown
   * 
   * @param specifier The specifier of the redirection
   * @param text The text that is being output to the File
   * @param file The name of the File
   * @throws InvalidNameException If the Directory name is invalid.
   * @throws InvalidPathException If the path is invalid.
   * @throws AlreadyExistsException If the file already exist.
   * @throws IllegalArgumentException If the specifier is neither.
   */
  public void redirect(String specifier, String text, String file) throws InvalidNameException,
      InvalidPathException, AlreadyExistsException, IllegalArgumentException {
    if (specifier.matches(">")) {
      overrideText(text, file);
    } else if (specifier.matches(">>")) {
      appendText(text, file);
    } else {
      throw new IllegalArgumentException("The arguments provided aren't valid");
    }
  }


  /**
   * Appends text to a file in the FileSystem.
   * 
   * @param text The text that is being appended to the File
   * @param file The name of the File
   * @throws InvalidPathException If the path is invalid.
   * @throws InvalidNameException If the Directory name is invalid.
   * @throws AlreadyExistsException If the file already exist.
   */
  private void appendText(String text, String file)
      throws InvalidPathException, InvalidNameException, AlreadyExistsException {
    Path p = new Path(file);
    File f = fs.findFile(p);
    if (f == null) {
      fs.addFile(p);
    }

    f = fs.findFile(p);
    f.appendText("\n" + text);
  }


  /**
   * Overwrites text to a file in the FileSystem.
   * 
   * @param text The text that is being overwritten to the File
   * @param file The name of the File
   * @throws InvalidPathException If the path is invalid.
   * @throws InvalidNameException If the Directory name is invalid.
   * @throws AlreadyExistsException If the file already exist.
   */
  private void overrideText(String text, String file)
      throws InvalidPathException, InvalidNameException, AlreadyExistsException {
    Path p = new Path(file);
    File f = fs.findFile(p);
    if (f == null) {
      fs.addFile(p);
    }
    f = fs.findFile(p);
    f.setText(text);
  }

  /**
   * If d is an invalid directory, InvalidPathException is thrown.
   * 
   * @param d The Directory that is being checked
   * @throws InvalidPathException If the path is invalid.
   */
  private void checkForInvalidPath(Directory d) throws InvalidPathException {
    if (d == null) {
      throw new InvalidPathException("Path is invalid.");
    }
  }

}
